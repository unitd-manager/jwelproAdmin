{"version":3,"sources":["components/Tender/EditLineItemModal.js","components/Message.js"],"names":["EditLineItemModal","editLineModal","setEditLineModal","FetchLineItemData","useState","lineItemData","setLineItemData","handleData","e","target","name","value","React","useEffect","isOpen","sm","type","defaultValue","title","onChange","description","quantity","unit","unit_price","amount","color","className","onClick","api","post","then","res","console","log","data","message","window","location","reload","catch","msg","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning"],"mappings":"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","file":"static/js/171.09f7a1d3.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {Row,Col, Modal,ModalHeader,ModalBody,FormGroup,Label,Input,Button,ModalFooter } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\n\r\nconst EditLineItemModal = ({editLineModal,setEditLineModal,FetchLineItemData}) =>\r\n\r\n    {\r\n        EditLineItemModal.propTypes = {\r\n            editLineModal: PropTypes.bool,\r\n            setEditLineModal: PropTypes.func,\r\n            FetchLineItemData: PropTypes.object,     \r\n    }\r\n    \r\n    const [lineItemData,setLineItemData] = useState(null);\r\n\r\n    const handleData = (e) => {\r\n        setLineItemData({...lineItemData, [e.target.name]:e.target.value});\r\n    }\r\n\r\n    const UpdateData = () => {\r\n\r\n        //console.log('editline item',lineItemData)\r\n\r\n        api.post('/tender/edit-TabQuoteLine',lineItemData)\r\n        .then((res)=> {\r\n          console.log('edit Line Item',res.data.data)\r\n            message('Edit Line Item Udated Successfully.','success')\r\n            window.location.reload()\r\n        }).catch(()=>{\r\n            message('Unable to edit quote. please fill all fields','error')\r\n        })\r\n\r\n    }\r\n\r\n\r\n   React.useEffect(() => {\r\n    setLineItemData(FetchLineItemData)\r\n   }, [FetchLineItemData])\r\n   \r\n\r\n  return (\r\n    <>\r\n        <Modal isOpen={editLineModal}>\r\n            <ModalHeader>Line Items</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Label sm=\"2\">Title</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"textarea\" name=\"title\" defaultValue={lineItemData && lineItemData.title} onChange={handleData} />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Label sm=\"2\">Description</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"textarea\" name=\"description\" defaultValue={lineItemData && lineItemData.description} onChange={handleData}/>\r\n                        </Col>\r\n                    </Row> \r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Label sm=\"2\">Qty</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"text\" name=\"quantity\" defaultValue={lineItemData && lineItemData.quantity} onChange={handleData}/>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Label sm=\"2\">UoM</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"text\" name=\"unit\" defaultValue={lineItemData && lineItemData.unit} onChange={handleData} />\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n                <FormGroup> \r\n                    <Row>\r\n                        <Label sm=\"2\">Unit Price</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"text\" name=\"unit_price\" defaultValue={lineItemData && lineItemData.unit_price} onChange={handleData}/>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Label sm=\"2\">Total Price</Label>\r\n                        <Col sm=\"10\">\r\n                        <Input type=\"text\" name=\"amount\" defaultValue={lineItemData && lineItemData.amount} onChange={handleData}/>\r\n                        </Col>\r\n                    </Row>\r\n                </FormGroup>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" className='shadow-none' type=\"button\" onClick={UpdateData}> Save & Continue </Button>\r\n                <Button color=\"secondary\" className='shadow-none' onClick={()=>{setEditLineModal(false) }}> Cancel </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditLineItemModal","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n"],"sourceRoot":""}