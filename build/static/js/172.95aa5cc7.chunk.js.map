{"version":3,"sources":["components/Tender/EditQuoteModal.js","components/Message.js"],"names":["ComponentCard","React","lazy","EditQuoteModal","editQuoteModal","setEditQuoteModal","existingQuote","useState","quoteData","setQuoteData","conditions","setConditions","lineItem","setLineItem","handleData","e","target","name","value","handleDataEditor","type","draftToHtml","convertToRaw","getCurrentContent","useEffect","existingQuoteformal","quote_condition","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","editorState","EditorState","createWithContent","convertHtmlToDraftcondition","intro_drawing_quote","convertHtmlToDraft","size","isOpen","color","onClick","md","defaultValue","quote_date","onChange","quote_code","quote_status","selected","project_location","project_reference","payment_method","revision","inline","className","id","show_project_manager","for","wrapperClassName","editorClassName","onEditorStateChange","api","post","then","res","console","log","data","message","window","location","reload","catch","msg","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning"],"mappings":"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","file":"static/js/172.95aa5cc7.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\r\nimport { Row,Col,FormGroup,Input,Button,Modal,ModalHeader,ModalBody,Label,Form} from 'reactstrap';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport PropTypes from 'prop-types'\r\n// import message from '../Message';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport {EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nconst ComponentCard = React.lazy(() => import('../ComponentCard'))\r\n\r\nconst EditQuoteModal = ({editQuoteModal,setEditQuoteModal,existingQuote}) => \r\n\r\n{\r\n    EditQuoteModal.propTypes = {\r\n        editQuoteModal: PropTypes.bool,\r\n        setEditQuoteModal: PropTypes.func,\r\n        existingQuote: PropTypes.object,\r\n      }\r\n\r\n    //   Get Quote Edited Value\r\n    const [quoteData, setQuoteData] = useState(existingQuote);\r\n    const [conditions, setConditions] = useState('')\r\n    const [lineItem, setLineItem] = useState('')\r\n\r\n      const handleData = (e) => {\r\n        setQuoteData({...quoteData, [e.target.name]:e.target.value});\r\n      }\r\n     \r\n    const GetEditQuote = () => {\r\n\r\n        api.post('/tender/edit-TabQuote',quoteData)\r\n        .then((res)=> {\r\n          console.log('edit quote',res.data.data)\r\n            message('Quote Edited Successfully.','success')\r\n            window.location.reload()\r\n        }).catch(()=>{\r\n            message('Unable to edit quote. please fill all fields','error')\r\n        })\r\n    }\r\n\r\n    const handleDataEditor = (e,type) =>{\r\n        \r\n            setQuoteData({...quoteData, [type]:draftToHtml(convertToRaw(e.getCurrentContent()))});\r\n\r\n    }\r\n\r\n    const convertHtmlToDraftcondition = (existingQuoteformal) =>{\r\n        if(existingQuoteformal && existingQuoteformal.quote_condition){\r\n            const contentBlock = htmlToDraft(existingQuoteformal && existingQuoteformal.quote_condition);\r\n            if (contentBlock) {\r\n              const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n              const editorState = EditorState.createWithContent(contentState);\r\n              setConditions(editorState)\r\n            }\r\n        } \r\n    }\r\n\r\n\r\n    const convertHtmlToDraft = (existingQuoteformal) =>{\r\n        if(existingQuoteformal && existingQuoteformal.intro_drawing_quote){\r\n            const contentBlock = htmlToDraft(existingQuoteformal && existingQuoteformal.intro_drawing_quote);\r\n            if (contentBlock) {\r\n              const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n              const editorState = EditorState.createWithContent(contentState);\r\n              setLineItem(editorState)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setQuoteData(existingQuote)\r\n        convertHtmlToDraftcondition(existingQuote)\r\n        convertHtmlToDraft(existingQuote)\r\n    }, [existingQuote])\r\n    \r\n    \r\n  return (\r\n    <>\r\n     {/*  Edit Quote Modal */}\r\n     <Modal size=\"lg\" isOpen={editQuoteModal}>\r\n        <ModalHeader>Edit Quote \r\n        <Button color=\"secondary\" onClick={()=>{setEditQuoteModal(false) }}>X</Button>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n            <FormGroup>\r\n                <Form>\r\n                    <FormGroup>\r\n                    <ComponentCard >\r\n                        <Row>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Date</Label>\r\n                            <Input type=\"date\" name=\"quote_date\" defaultValue={quoteData && quoteData.quote_date} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Code</Label>\r\n                            <Input type=\"text\" name='quote_code' defaultValue={quoteData && quoteData.quote_code} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Status</Label>\r\n                            <Input type=\"select\" name=\"quote_status\" defaultValue={quoteData && quoteData.quote_status} onChange={handleData}>\r\n                            <option selected=\"selected\" value=\"New\">New</option>\r\n                            <option value=\"Quoted\">Quoted</option>\r\n                            <option value=\"Awarded\">Awarded</option>\r\n                            <option value=\"Not Awarded\">Not Awarded</option>\r\n                            <option value=\"Cancelled\">Cancelled</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Project Location</Label>\r\n                            <Input type=\"text\" name=\"project_location\" defaultValue={quoteData && quoteData.project_location} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        </Row>\r\n                        \r\n                        <Row>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Project Reference</Label>\r\n                                <Input type=\"text\" name=\"project_reference\" defaultValue={quoteData && quoteData.project_reference} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Mode of Payment</Label>\r\n                            <Input type=\"select\" name=\"payment_method\" defaultValue={quoteData && quoteData.payment_method} onChange={handleData}>\r\n                                <option value=\"\">Please Select</option><option value=\"15 days\">15 days</option>\r\n                                <option selected=\"selected\" value=\"30 days\">30 days</option>\r\n                                <option value=\"60 days\">60 days</option>\r\n                                <option value=\"COD\">COD</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Revision</Label>\r\n                                <Input type=\"text\" name=\"revision\" defaultValue={quoteData && quoteData.revision} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                        <Label>Show Project Manager</Label>\r\n\r\n                            <Form inline>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                <Input\r\n                                    className=\"form-check-input\"\r\n                                    id=\"inlineradio1\"\r\n                                    type=\"radio\"\r\n                                    name=\"show_project_manager\"\r\n                                    value=\"1\"\r\n                                    defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}\r\n                                />\r\n                                <Label for=\"inlineradio1\">yes</Label>\r\n                                </div>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                <Input\r\n                                    className=\"form-check-input\"\r\n                                    id=\"inlineradio2\"\r\n                                    type=\"radio\"\r\n                                    name=\"show_project_manager\"\r\n                                    value=\"0\"\r\n                                    defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}\r\n                                />\r\n                                <Label for=\"inlineradio2\">No</Label>\r\n                                </div>\r\n                            </Form>\r\n{/* <FormGroup check>\r\n<Input name=\"show_project_manager\" type=\"radio\" value=\"1\" defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}/>{' '}\r\n<Label check>Yes</Label>\r\n</FormGroup>\r\n<FormGroup check>\r\n    <Input name=\"show_project_manager\" type=\"radio\" value=\"0\" defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}/>{' '}\r\n    <Label check> No </Label>\r\n</FormGroup> */}\r\n\r\n                        </Col>\r\n                        </Row>\r\n                        <Row>\r\n                        <Label>Intro Line Items</Label>\r\n                        </Row>\r\n                        <Editor\r\n                            editorState={lineItem}\r\n                            wrapperClassName=\"demo-wrapper mb-0\"\r\n                            editorClassName=\"demo-editor border mb-4 edi-height\"\r\n                            onEditorStateChange={(e)=>{\r\n                                handleDataEditor(e,'intro_drawing_quote')\r\n                                setLineItem(e)\r\n                            }}\r\n                        />\r\n                        <Row>\r\n                        <Label>Terms & Condition</Label>\r\n                        </Row>\r\n                        <Editor\r\n                            editorState={conditions}\r\n                            wrapperClassName=\"demo-wrapper mb-0\"\r\n                            editorClassName=\"demo-editor border mb-4 edi-height\"\r\n                            onEditorStateChange={(e)=>{\r\n                                handleDataEditor(e,'quote_condition')\r\n                                setConditions(e)\r\n                            }}\r\n                        />\r\n\r\n                        <Row>\r\n                        <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                            <Button type=\"button\" color='primary' className=\"btn shadow-none mr-2\" onClick={GetEditQuote}>\r\n                            Save & Continue\r\n                            </Button>\r\n                            <Button color=\"secondary\" className='shadow-none' onClick={()=>{setEditQuoteModal(false) }}>Cancel</Button>\r\n                        </div>\r\n                        </Row>\r\n\r\n                    </ComponentCard>\r\n                    </FormGroup> \r\n                </Form>\r\n            </FormGroup>\r\n        </ModalBody>\r\n    </Modal>\r\n    {/* END Edit Quote Modal */}\r\n\r\n</>\r\n  )\r\n}\r\n\r\nexport default EditQuoteModal\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n"],"sourceRoot":""}