{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/Customer/MakeSchemePayment.js","views/EditData/CustomerEdit.js","constants/creationdatetime.js","components/ComponentCardV2.js","components/Tab.js","../node_modules/react-feather/dist/icons/trash-2.js","../node_modules/react-feather/dist/icons/trash.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","created_by","creation_date","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","months","FinanceReceiptData","SchemeId","ContactId","handleAddOrder","checkOrderExists","useState","createReceipt","setCreateReceipt","selectedMonths","setSelectedMonths","schemeAmount","setSchemeAmount","paymentHistory","setPaymentHistory","isReceipt","setIsReceipt","useEffect","api","post","scheme_id","then","res","data","amount","catch","contact_id","handleInputreceipt","e","target","name","value","length","baseAmount","Math","floor","remainder","totalAmount","map","additionalAmount","reduce","sum","prev","handleSubmit","invoiceRecords","month","monthAmount","date","moment","format","record","invoice_amount","invoice_date","mode_of_payment","cheque_no","cheque_date","bank_name","remarks","promises","insertInvoiceItem","insertPaymentHistory","insertReceiptHistory","Promise","resolve","all","console","handleCreatePayment","orderExists","log","md","disabled","check","checked","includes","onChange","some","payment","filter","m","handleMonthChange","readOnly","selected","onClick","ContentUpdate","contentDetails","setContentDetails","schemeContacts","setSchemeContacts","activeTab","setActiveTab","secondModalOpen","setSecondModalOpen","selectedScheme","setSelectedScheme","paymenthistory","schemeorder","setSchemeOrder","orderdetails","setOrderDetails","id","useParams","navigate","useNavigate","loggedInuser","useContext","AppContext","handleInputs","addPurchaseOrderModal","setAddPurchaseOrderModal","tenderForms","setTenderForms","company","setCompany","editContentData","creationdatetime","content_title","sub_category_id","published","addContactToggle","get","orderData","columns","selector","grow","wrap","width","sortable","cell","paymentcolumns","scheme","first_name","mobile","email","address","address1","order_date","Date","toISOString","order_status","ComponentCardV2","color","setTimeout","readonly","pass_word","Tab","toggle","tab","tabs","tabId","bind","element","i","start_date","end_date","status","ContactSchemeId","contact_scheme_id","Swal","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","window","reload","isOpen","MakeSchemePayment","schemeData","size","handleInputsTenderForms","insertedDataId","insertId","PaymentHistoryId","scheme_payment_history_id","pStyle","textAlign","marginRight","oStyle","outline","border","style","useSearchParams","searchParams","setSearchParams","_extends","Object","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Trash2","forwardRef","_ref","ref","_ref$color","_ref$size","rest","React","createElement","xmlns","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","d","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","Trash"],"mappings":"iHAAA,mCAwBeA,IApBK,SAACC,GACnB,IAAMC,EAAWC,cACXC,EAAWF,EAASG,SAASC,MAAM,KAAK,GACxCC,EAAYL,EAASG,SAASC,MAAM,KAAK,GAE/C,OACE,qCAEE,6BAAKL,EAAKO,UACV,eAAC,IAAD,WACE,cAAC,IAAD,CAAgBC,GAAG,IAAIC,IAAKC,IAAMC,UAAU,uBAA5C,kBAGCR,EAAW,cAAC,IAAD,CAAgBS,QAAM,EAAtB,SAAwBT,IAA6B,GAChEG,EAAY,cAAC,IAAD,CAAgBM,QAAM,EAAtB,SAAwBN,IAA8B,W,iCClB3E,oBAqDeO,IAlDC,SAACC,EAAIC,GACjB,MAAY,YAATA,EACOC,IAAMC,QAAQH,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,UAATX,EACMC,IAAMW,MAAMb,EAAK,CACnBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,SAATX,EACKC,IAAMY,KAAKd,EAAK,CAClBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAEK,YAATX,EACMC,IAAMa,QAAQf,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAGRV,YAAMF,K,kEC7CV,SAASgB,EAAT,GAA0D,IAAD,IAAzBC,eAAyB,MAAf,KAAe,EAATC,EAAS,EAATA,MAK7D,OACE,mCACE,cAAC,IAAD,CAAWvB,IAAI,KAAKE,UAAU,+BAA9B,SACE,eAAC,KAAD,WACE,cAAC,IAAD,UAAMqB,IACLD,GACC,eAAC,IAAD,WACE,cAAC,KAAD,UACE,gDAAmBA,GAAWA,EAAQE,WAAtC,IAAmDF,GAAWA,EAAQG,mBAExE,cAAC,KAAD,CAAKvB,UAAU,SAAf,SACE,gDAAmBoB,GAAWA,EAAQI,YAAtC,IAAoDJ,GAAWA,EAAQK,iCCOxEC,UAvBO,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,SAAUN,EAA+C,EAA/CA,MAAOO,EAAwC,EAAxCA,SAASC,EAA+B,EAA/BA,yBACjD,OACE,eAAC,IAAD,CAAM7B,UAAU,cAAhB,UACE,cAACmB,EAAD,CAAsBC,QAASS,EAA0BR,MAAOA,IAKhE,eAAC,IAAD,CAAUrB,UAAU,MAApB,UACE,cAAC,IAAD,CAAcA,UAAU,kBAAxB,SAA2C4B,GAAY,KACvD,8BAAMD,Y,2QCPRG,EAAS,CACb,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YA6RzCC,EA1RY,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAQjE,EAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA4CN,mBAAS,IAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WAqBJf,GAAYC,IAnBde,IAAIC,KAAK,wBAAyB,CAAEC,UAAWlB,IAC5CmB,MAAK,SAACC,GACLV,EAAgBU,EAAIC,KAAKA,KAAKC,WAE/BC,OAAM,WACLrD,YAAQ,uBAAwB,WAKpC8C,IAAIC,KAAK,6BAA8B,CAAEO,WAAYvB,EAAWiB,UAAWlB,IACxEmB,MAAK,SAACC,GACLR,EAAkBQ,EAAIC,KAAKA,SAE5BE,OAAM,WACLrD,YAAQ,4BAA6B,cAQ1C,CAAC8B,EAAUC,IAEd,IAAMwB,EAAqB,SAACC,GAC1BpB,EAAiB,2BAAKD,GAAN,kBAAsBqB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAcjEd,qBAAU,WACR,GAAIR,EAAeuB,OAAS,EAAG,CAC7B,IAAMC,EAAaC,KAAKC,MAAMxB,EAAe,IACzCyB,EAAYzB,EAA6B,GAAbsB,EAQ1BI,EANU5B,EAAe6B,KAAI,WACjC,IAAMC,EAAmBH,EAAY,EAAI,EAAI,EAE7C,OADAA,IACOH,EAAaM,KAGMC,QAAO,SAACC,EAAKjB,GAAN,OAAiBiB,EAAMjB,IAAQ,GAClEhB,GAAiB,SAAAkC,GAAI,kCAAUA,GAAV,IAAgBlB,OAAQa,YAE7C7B,GAAiB,SAAAkC,GAAI,kCAAUA,GAAV,IAAgBlB,OAAQ,SAE9C,CAACf,EAAgBE,IAEpB,IAAMgC,EAAY,iDAAG,6GACbV,EAAaC,KAAKC,MAAMxB,EAAe,IACzCyB,EAAYzB,EAA6B,GAAbsB,EAE1BW,EAAiBnC,EAAe6B,KAAI,SAAAO,GACxC,IAAMN,EAAmBH,EAAY,EAAI,EAAI,EAC7CA,IACA,IAAMU,EAAcb,EAAaM,EAEjC,OAAO,2BACFhC,GADL,IAEEsC,QACArB,OAAQsB,EACR1B,UAAWlB,EACXwB,WAAYvB,EACZ4C,KAAMxC,EAAcwC,MAAQC,MAASC,OAAO,mBAf7B,SAoBXZ,EAAcO,EAAeJ,QAAO,SAACC,EAAKS,GAAN,OAAiBT,EAAMS,EAAO1B,SAAQ,GApB/D,SAuBXN,IAAIC,KAAK,yBAA0B,CACvCC,UAAWlB,EACXwB,WAAYvB,EACZgD,eAAgBd,EAChBe,aAAc7C,EAAcwC,MAAQC,MAASC,OAAO,gBA3BrC,WA+BblC,EA/Ba,kCAgCTG,IAAIC,KAAK,yBAA0B,CACvCC,UAAWlB,EACXwB,WAAYvB,EACZqB,OAAQa,EACRU,KAAMxC,EAAcwC,MAAQC,MAASC,OAAO,cAC5CI,gBAAiB9C,EAAc8C,gBAC/BC,UAAW/C,EAAc+C,UACzBC,YAAahD,EAAcgD,YAC3BC,UAAWjD,EAAciD,UACzBC,QAASlD,EAAckD,UAzCV,eA8CXC,EAAWd,EAAeN,KAAI,SAAAY,GAClC,IAAMS,EAAoBzC,IAAIC,KAAK,6BAA8B+B,GAC3DU,EAAuB1C,IAAIC,KAAK,6CAA8C+B,GAE9EW,EAAuB9C,EACzBG,IAAIC,KAAK,gCAAiC+B,GAC1CY,QAAQC,UAEZ,OAAOD,QAAQE,IAAI,CAACL,EAAmBC,EAAsBC,OAtD9C,UA0DXC,QAAQE,IAAIN,GA1DD,QA4DjBtF,YAAQ,gCAAiC,WA5DxB,kDA8DjB6F,QAAQ/E,MAAM,2BAAd,MACAd,YAAQ,0BAA2B,UA/DlB,0DAAH,qDAmEZ8F,EAAmB,iDAAG,8GACA7D,EAAiBH,EAAUC,GAD3B,OACpBgE,EADoB,OAE1BF,QAAQG,IAAI,gBAAiBD,GAEzBA,GAIF/D,IAHAuC,IALwB,2CAAH,qDAczB,OACE,qCACE,cAAC,IAAD,CAAK0B,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,kCACA,cAAC,IAAD,CACE/F,KAAK,OACLyD,MAAOpB,GAAgB,GACvBmB,KAAK,eACLwC,UAAQ,SAId,cAAC,IAAD,CAAKD,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,4BACCrE,EAAOsC,KAAI,SAAAO,GAAK,OACf,cAAC,IAAD,CAAW0B,OAAK,EAAhB,SACE,eAAC,IAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,IAAD,CACEjG,KAAK,WACLkG,QAAS/D,EAAegE,SAAS5B,GACjC6B,SAAU,kBApIA,SAAC7B,GACLhC,EAAe8D,MAAK,SAAAC,GAAO,OAAIA,EAAQ/B,QAAUA,KAEnEzE,YAAQ,mCAAoC,WAE5CsC,GAAkB,SAAAgC,GAAI,OACpBA,EAAK+B,SAAS5B,GAASH,EAAKmC,QAAO,SAAAC,GAAC,OAAIA,IAAMjC,KAA9C,sBAA2DH,GAA3D,CAAiEG,OA8HvCkC,CAAkBlC,MACjC,IACFA,MAPiBA,WAa5B,cAAC,IAAD,CAAKwB,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,yCACA,cAAC,IAAD,CACE/F,KAAK,OACLyD,MAAOxB,EAAciB,QAAU,GAC/BM,KAAK,SACLkD,UAAQ,SAKd,cAAC,IAAD,CAAKX,GAAG,KAAR,SACE,eAAC,IAAD,WACE,eAAC,IAAD,8BAAuB,sBAAMnG,UAAU,WAAhB,kBACvB,eAAC,IAAD,CAAOI,KAAK,SAASwD,KAAK,kBAAkB4C,SAAU/C,EAAtD,UACE,wBAAQI,MAAM,GAAGkD,SAAS,WAA1B,2BACA,wBAAQlD,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,0BAI6B,WAAlCxB,EAAc8C,iBACb,qCACE,cAAC,IAAD,CAAKgB,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,CACE/F,KAAK,SACLoG,SAAU/C,EACVI,MAAOxB,EAAc+C,WAAa,GAClCxB,KAAK,mBAIX,cAAC,IAAD,CAAKuC,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,yBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAU/C,EACVI,MAAOxB,EAAcgD,aAAe,GACpCzB,KAAK,qBAIX,cAAC,IAAD,CAAKuC,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAU/C,EACVI,MAAOxB,EAAciD,WAAa,GAClC1B,KAAK,sBAMf,cAAC,IAAD,CAAKuC,GAAG,KAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAU/C,EACVI,MAAOxB,EAAckD,SAAW,GAChC3B,KAAK,iBAIX,cAAC,IAAD,CAAKuC,GAAG,KAAR,SACE,cAAC,IAAD,CAAWE,OAAK,EAAhB,SACE,eAAC,IAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,IAAD,CACEjG,KAAK,WACLkG,QAASzD,EACT2D,SAAU,kBAAM1D,GAAcD,MAC7B,IALL,wBAWJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEmE,QAAShB,EACT5F,KAAK,SACLJ,UAAU,2BAHZ,wBC0lBOiH,UAl2BO,WAEpB,MAA4C7E,qBAA5C,mBAAO8E,EAAP,KAAuBC,EAAvB,KACA,EAA4C/E,qBAA5C,mBAAOgF,EAAP,KAAuBC,EAAvB,KACA,EAAkCjF,mBAAS,KAA3C,mBAAOkF,EAAP,KAAkBC,EAAlB,KACA,EAA8CnF,oBAAS,GAAvD,mBAAOoF,EAAP,KAAwBC,EAAxB,KACA,EAA4CrF,mBAAS,MAArD,mBAAOsF,EAAP,KAAuBC,EAAvB,KACA,EAA4CvF,mBAAS,MAArD,mBAAOwF,EAAP,KAAuBhF,EAAvB,KAEA,EAAsCR,mBAAS,MAA/C,mBAAOyF,EAAP,KAAoBC,EAApB,KACA,EAAwC1F,oBAAS,GAAjD,mBAAO2F,EAAP,KAAqBC,EAArB,KAGQC,GAAOC,cAAPD,GACFE,GAAWC,cACTC,GAAiBC,qBAAWC,KAA5BF,aAGFG,GAAe,SAAC9E,GACpByD,EAAkB,2BAAKD,GAAN,kBAAuBxD,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAWnE,GAA0DzB,qBAA1D,qBAAOqG,GAAP,MAA8BC,GAA9B,MACA,GAAsCtG,mBAAS,CAC7CoB,WAAY,KADd,qBAAOmF,GAAP,MAAoBC,GAApB,MAIA,GAA8BxG,qBAA9B,qBAAOyG,GAAP,MAAgBC,GAAhB,MAuCMC,GAAkB,WACtB7B,EAAezF,kBAAoBuH,IACnCjD,QAAQG,IAAIgB,GAEuB,KAAjCA,EAAe+B,eACoB,KAAnC/B,EAAegC,iBACc,KAA7BhC,EAAeiC,UAEfnG,IACGC,KAAK,uBAAwBiE,GAC7B/D,MAAK,WACJjD,YAAQ,6BAA8B,cAEvCqD,OAAM,WACLrD,YAAQ,yBAA0B,YAGtCA,YAAQ,kCAAmC,YAMzCkJ,GAAmB,WACvBV,IAA0BD,KA0C9B1F,qBAAU,WA3BNC,IACGC,KAAK,gCAAiC,CAAEO,WAAYyE,KACpD9E,MAAK,SAACC,GACLiE,EAAkBjE,EAAIC,KAAKA,MAC3B0C,QAAQG,IAAI,oBAAqB9C,EAAIC,KAAKA,SAE3CE,OAAM,WACLrD,YAAQ,mCAAoC,cAsBjD,CAAC+H,KACJlF,qBAAU,WAzCNC,IAAIqG,IAAI,uBAAuBlG,MAAK,SAACC,GACnC0F,GAAW1F,EAAIC,KAAKA,WA0CvB,IAEDN,qBAAU,WAnFRC,IACGC,KAAK,2BAA4B,CAAEO,WAAYyE,KAC/C9E,MAAK,SAACC,GACL+D,EAAkB/D,EAAIC,KAAKA,KAAK,OAEjCE,OAAM,WACLrD,YAAQ,yBAA0B,aA+ErC,CAAC+H,KACJlF,qBAAU,WAzBVC,IAAIC,KAAK,sCAAuC,CAACO,WAAYyE,KAC1D9E,MAAK,SAACC,GACLR,EAAkBQ,EAAIC,KAAKA,SAE5BE,OAAM,WACLrD,YAAQ,4BAA6B,aAsBtC,CAAC+H,KAcJ,IAAM9F,GAAgB,iDAAG,WAAOH,EAAUC,GAAjB,4GAEHe,IAAIC,KAAK,wBAAyB,CAAEC,UAAWlB,EAAUwB,WAAYvB,IAFlE,UAEfmB,EAFe,OAGfkG,EAAYlG,EAAIC,KAAKA,KAC3ByE,EAAewB,GACfvD,QAAQG,IAAI,gBAAiBoD,IAGzBA,GAAaA,EAAUpG,YAAclB,GAAYsH,EAAU9F,aAAevB,EARzD,wBASnB8D,QAAQG,IAAI,cAAc,GATP,mBAUZ,GAVY,eAYrBH,QAAQG,IAAI,cAAc,GAZL,mBAad,GAbc,yCAerBH,QAAQ/E,MAAM,wBAAd,MAfqB,mBAgBd,GAhBc,0DAAH,wDAqBxB+B,qBAAU,WACRgD,QAAQG,IAAI,sBAAuB2B,KAClC,CAACA,IAIF,IAoBM0B,GAAU,CACd,CACE3F,KAAM,KACN4F,SAAU,aACVC,KAAM,EACNC,MAAM,EACNC,MAAO,MAET,CACE/F,KAAM,QACN4F,SAAU,QACVI,UAAU,EACVH,KAAM,EACNC,MAAM,GAUR,CACE9F,KAAM,SAEN4F,SAAU,SACVI,UAAU,EACVH,KAAM,GAER,CACE7F,KAAM,aACN4F,SAAU,aACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,WACN4F,SAAU,WACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,SACN4F,SAAU,SACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,MACN4F,SAAU,SACVK,KAAM,kBAAM,cAAC,IAAD,KACZJ,KAAM,EACNE,MAAO,OACPD,MAAM,GAER,CACE9F,KAAM,UACN4F,SAAU,UACVC,KAAM,EACNE,MAAO,OACPD,MAAM,IAKJI,GAAiB,CACrB,CACElG,KAAM,KACN4F,SAAU,GACVC,KAAM,EACNC,MAAM,EACNC,MAAO,MAET,CACE/F,KAAM,QACN4F,SAAU,QACVI,UAAU,EACVH,KAAM,EACNC,MAAM,GAUR,CACE9F,KAAM,SAEN4F,SAAU,SACVI,UAAU,EACVH,KAAM,GAER,CACE7F,KAAM,QACN4F,SAAU,QACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,gBACN4F,SAAU,OACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,kBACN4F,SAAU,kBACVI,UAAU,EACVD,MAAO,OACPF,KAAM,GAER,CACE7F,KAAM,MACN4F,SAAU,SACVK,KAAM,kBAAM,cAAC,IAAD,KACZJ,KAAM,EACNE,MAAO,OACPD,MAAM,IAyDJ1D,GAAmB,iDAAG,WAAO+D,GAAP,2EAC1BpC,EAAkBoC,GAClBtC,GAAmB,GACnBO,EAAgB,CACV3G,MAAO6F,EAAe8C,WACtBC,OAAQ/C,EAAe+C,OACvBC,MAAOhD,EAAegD,MACtBC,QAASjD,EAAekD,SACxBC,YAAY,IAAIC,MAAOC,cAAc7K,MAAM,KAAK,GAChD8K,aAAc,KATM,2CAAH,sDA8BnBtI,GAAc,iDAAG,WAAOoH,GAAP,2FAtOnBvB,EAAa7E,UAAYwE,EAAexE,UACxC6E,EAAazG,WAAa+G,GAAa2B,WACvCjC,EAAaxG,cAAgByH,SAC7BhG,IACGC,KAAK,uBAAwB8E,GAC7B5E,MAAK,SAACC,GACL4E,EAAgB5E,EAAIC,KAAKA,MAEzBnD,YAAQ,iCAAkC,cAG3CqD,OAAM,WACLrD,YAAQ,gCA0NO,2CAAH,sDAOpB,OACE,qCACE,cAACd,EAAA,EAAD,CAAaQ,QAASsH,GAAkBA,EAAe7F,QACvD,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAACoJ,EAAA,EAAD,UACE,eAAC,KAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,MAAM,UACN1D,QAAS,WACP+B,KACA4B,YAAW,WACTxC,GAAS,eACR,OANP,oBAYF,cAAC,IAAD,UACE,cAAC,IAAD,CACEuC,MAAM,UACN1D,QAAS,WACP+B,MAHJ,qBASF,cAAC,IAAD,UACE,cAAC,IAAD,CACE2B,MAAM,OACN1D,QAAS,WACPmB,GAAS,aACTpC,QAAQG,IAAI,iBAJhB,iCAaN,eAACxE,EAAA,QAAD,CAAeL,MAAM,mBAAmBQ,yBAA0BqF,EAAlE,UACE,cAAC,IAAD,IACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAKf,GAAG,IAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,2BACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAe1D,WACxCI,KAAK,aACLgH,UAAQ,SAId,cAAC,IAAD,CAAKzE,GAAG,IAAR,SACE,eAAC,IAAD,WACA,cAAC,IAAD,mBAAmB,sBAAMnG,UAAU,WAAhB,eACjB,cAAC,IAAD,CACEI,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAe8C,WACxCpG,KAAK,oBAIX,cAAC,IAAD,CAAKuC,GAAG,IAAR,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,qBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAe+C,OACxCrG,KAAK,gBAIX,cAAC,IAAD,CAAKuC,GAAG,IAAR,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,oBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAegD,MACxCtG,KAAK,eAIX,cAAC,IAAD,CAAKuC,GAAG,IAAR,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,uBACA,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAe2D,UACxCjH,KAAK,mBAIX,cAAC,IAAD,CAAKuC,GAAG,IAAR,SACE,eAAC,IAAD,WACA,cAAC,IAAD,sBACE,cAAC,IAAD,CACE/F,KAAK,OACLoG,SAAUgC,GACV3E,MAAOqD,GAAkBA,EAAekD,SACxCxG,KAAK,6BASnB,eAAClC,EAAA,QAAD,CAAeL,MAAM,eAArB,UACE,cAAC,IAAD,IAEA,cAACyJ,EAAA,EAAD,CAAKC,OAnhBI,SAACC,GACV1D,IAAc0D,GAAKzD,EAAayD,IAkhBXC,KAxhBd,CACX,CAAEhD,GAAI,IAAKrE,KAAM,iBACjB,CAAEqE,GAAI,IAAKrE,KAAM,cAuhBb,eAAC,KAAD,CAAY5D,UAAU,MAAMsH,UAAWA,EAAvC,UACE,eAAC,KAAD,CAAS4D,MAAM,IAAf,UACF,cAAC,IAAD,CAAK/E,GAAG,IAAR,SACI,cAAC,IAAD,CAAQuE,MAAM,UAAU1K,UAAU,cAAcgH,QAASoC,GAAiB+B,KAAK,MAA/E,8BAIA,uBAEA,cAAC,KAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACR,eAAC,KAAD,CAAOlD,GAAG,UAAUjI,UAAU,0CAA9B,UACE,gCACE,6BACGuJ,GAAQnF,KAAI,SAACyF,GACZ,OAAO,6BAAqBA,EAAKjG,MAAjBiG,EAAKjG,aAI3B,gCACGwD,GACCA,EAAehD,KAAI,SAACgH,EAASC,GAC3B,OACE,+BACE,6BAAKA,EAAI,IACT,6BAAKD,EAAQ/J,QACb,6BAAK+J,EAAQ9H,SACb,6BAAK8H,EAAQE,aACb,6BAAKF,EAAQG,WACb,6BAAKH,EAAQI,SACb,6BACE,qBAAKd,MAAM,UAAU1K,UAAU,SAA/B,SACA,sBAAMgH,QAAS,kBAzPbyE,EAyPgCL,EAAQM,uBAxP5DC,IAAKC,KAAK,CACRvK,MAAM,iBACNwK,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,oBAClB/I,MAAK,SAACgJ,GACHA,EAAOC,aACTpJ,IACGC,KAAK,kCAAmC,CAAEyI,kBAAmBD,IAC7DtI,MAAK,WACJwI,IAAKC,KAAK,WAAY,mCAAoC,WAC1D1L,YAAQ,8BAA+B,WACvCyK,YAAW,WACT0B,OAAO/M,SAASgN,WACf,QAEJ/I,OAAM,WACLrD,YAAQ,2BAA4B,eArBzB,IAACuL,GAyPF,SACI,cAAC,IAAD,UAyBA,6BACJ,qBAAKf,MAAM,UAAU1K,UAAU,SAA/B,SACE,cAAC,IAAD,CAAQgH,QAAS,kBAAMhB,GAAoBoF,IAA3C,kCArCGA,EAAQM,6BAkK3B,eAAC,IAAD,CAAOa,OAAQ/E,EAAiBuD,OAAQ,kBAAMtD,GAAoBD,IAAlE,UACE,cAAC,IAAD,CAAauD,OAAQ,kBAAMtD,GAAoBD,IAA/C,iCACA,cAAC,IAAD,UACGE,GACC,cAAC8E,EAAD,CACExK,SAAU0F,EAAexE,UACzBjB,UAAWyF,EAAelE,WAC1BiJ,WAAY/E,EACZxF,eAAgBA,GAChBC,iBAAkBA,eAQtB,eAAC,IAAD,CAAOuK,KAAK,KAAKH,OAAQ9D,GAAuBsC,OAAQ3B,GAAiB+B,KAAK,MAA9E,UACE,cAAC,IAAD,CAAaJ,OAAQ3B,GAAiB+B,KAAK,MAA3C,4BACA,cAAC,IAAD,UACA,eAAC,IAAD,WACE,cAAC,KAAD,UAEE,cAAC,IAAD,CAAKhF,GAAG,KAAR,SACF,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,eAAC,IAAD,CACE/F,KAAK,SACLoG,SAAU,SAAC9C,GACTkF,GAAe,2BAAKD,IAAN,IAAmBzF,UAAWQ,EAAEC,OAAOE,SAluBzC,SAACH,GAC/BkF,GAAe,2BAAKD,IAAN,kBAAoBjF,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SAkuBzC8I,CAAwBjJ,IAG1BG,MAAO8E,GAAYzF,UACnBU,KAAK,YARP,UAUE,wBAAQC,MAAM,WAAd,2BACCgF,IACCA,GAAQzE,KAAI,SAACV,GACX,OACE,wBAA0BG,MAAOH,EAAER,UAAnC,SACGQ,EAAErC,OADQqC,EAAER,wBASrB,uBAEN,eAAC,IAAD,WACJ,cAAC,IAAD,CACEwH,MAAM,UACN1K,UAAU,cACVgH,QAAS,WAvvBa,KAA1B2B,GAAYzF,WACdyF,GAAYpH,cAAgByH,IAC5BL,GAAYrH,WAAa+G,GAAa2B,WACtCrB,GAAYnF,WAAayE,GACzBjF,IACGC,KAAK,mCAAoC0F,IACzCxF,MAAK,SAACC,GACL,IAAMwJ,EAAiBxJ,EAAIC,KAAKA,KAAKwJ,SACrCjE,GAAe,2BAAKD,IAAN,IAAmBnF,WAAYoJ,KAC3ChE,GAAe,2BAAKD,IAAN,IAAmBnF,WAAYJ,EAAIC,KAAKA,KAAKwJ,YAC7D3M,YAAQ,iCAAkC,WAC1CwI,IAAyB,MAE1BnF,OAAM,WACLrD,YAAQ,4BAA6B,aAGzCA,YAAQ,mCAAoC,UAmuBxC,oBASA,cAAC,IAAD,CACEwK,MAAM,YACN1K,UAAU,cACVgH,QAAS,WACP0B,IAAyB,IAJ7B,kCAgBA,cAAC,KAAD,CAASwC,MAAM,IAAf,SACA,cAAC,IAAD,UACM,cAAC,IAAD,UACR,eAAC,KAAD,CAAOjD,GAAG,UAAUjI,UAAU,0CAA9B,UACE,gCACE,6BACG8J,GAAe1F,KAAI,SAACyF,GACnB,OAAO,6BAAqBA,EAAKjG,MAAjBiG,EAAKjG,aAI3B,gCACGgE,GACCA,EAAexD,KAAI,SAACgH,EAASC,GAC3B,OACE,+BACE,6BAAKA,EAAI,IACT,6BAAKD,EAAQ/J,QACb,6BAAK+J,EAAQ9H,SACb,6BAAK8H,EAAQzG,QACb,6BAAKyG,EAAQvG,OACb,6BAAKuG,EAAQjG,kBACb,6BACE,qBAAKuF,MAAM,UAAU1K,UAAU,SAA/B,SACA,sBAAMgH,QAAS,kBA7dN8F,EA6dgC1B,EAAQ2B,+BA5dnEpB,IAAKC,KAAK,CACRvK,MAAM,iBACNwK,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,oBAClB/I,MAAK,SAACgJ,GACHA,EAAOC,aACTpJ,IACGC,KAAK,qCAAsC,CAAE8J,0BAA4BD,IACzE3J,MAAK,WACJwI,IAAKC,KAAK,WAAY,mCAAoC,WAC1D1L,YAAQ,8BAA+B,WACvCyK,YAAW,WACT0B,OAAO/M,SAASgN,WACf,QAEJ/I,OAAM,WACLrD,YAAQ,2BAA4B,eArBlB,IAAC4M,GA6dT,SACI,cAAC,IAAD,YAVC1B,EAAQ2B,oD,iCCv1BnC,aAEM/D,EAFN,MAEyBlE,KAASC,OAAO,wBAC1BiE,O,6ECHf,mBAGMgE,EAAS,CACbC,UAAW,QACXC,YAAa,QAETC,EAAO,CACbC,QAAQ,OACRC,OAAO,QAiBQ5C,IAdS,SAAC,GAAkB,IAAhB9I,EAAe,EAAfA,SACzB,OACE,cAAC,IAAD,CAAM3B,UAAU,cAAhB,SACE,cAAC,IAAD,CAAUsN,MAAON,EAAjB,SACE,qBAAKhN,UAAU,qDAAqDsN,MAAOH,EAA3E,SAAoFxL,U,6GCX7E,SAASmJ,EAAT,GAA+B,IAAhBC,EAAe,EAAfA,OAAOE,EAAQ,EAARA,KAOnC,EAAwCsC,cAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KAMA,OAJA1K,qBAAU,WACTgI,EAAOyC,EAAanE,IAAI,UACtB,CAACmE,EAAanE,IAAI,SAGnB,cAAC,IAAD,CAAK4B,MAAI,EAAT,gBAEGA,QAFH,IAEGA,OAFH,EAEGA,EAAM7G,KAAI,SAACV,GACV,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAEE1D,UAAW0D,EAAEuE,KAAOuF,EAAanE,IAAI,OAAS,SAAW,GACzDrC,QAAS,WACPyG,EAAgB,CAACzC,IAAItH,EAAEuE,KACvB8C,EAAOrH,EAAEuE,KALb,SAQGvE,EAAEE,MAPAF,EAAEuE,KAFKvE,EAAEuE,W,iCCvB1B,6CAASyF,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUjK,GAAU,IAAK,IAAI0H,EAAI,EAAGA,EAAIwC,UAAU/J,OAAQuH,IAAK,CAAE,IAAIyC,EAASD,UAAUxC,GAAI,IAAK,IAAI0C,KAAOD,EAAcH,OAAOK,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQpK,EAAOoK,GAAOD,EAAOC,IAAY,OAAOpK,GAAkB+J,EAASS,MAAMC,KAAMP,WAEhT,SAASQ,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAK1C,EAAnE1H,EAEzF,SAAuCmK,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAK1C,EAA5D1H,EAAS,GAAQ4K,EAAaZ,OAAOa,KAAKV,GAAqB,IAAKzC,EAAI,EAAGA,EAAIkD,EAAWzK,OAAQuH,IAAO0C,EAAMQ,EAAWlD,GAAQiD,EAASG,QAAQV,IAAQ,IAAapK,EAAOoK,GAAOD,EAAOC,IAAQ,OAAOpK,EAFxM+K,CAA8BZ,EAAQQ,GAAuB,GAAIX,OAAOgB,sBAAuB,CAAE,IAAIC,EAAmBjB,OAAOgB,sBAAsBb,GAAS,IAAKzC,EAAI,EAAGA,EAAIuD,EAAiB9K,OAAQuH,IAAO0C,EAAMa,EAAiBvD,GAAQiD,EAASG,QAAQV,IAAQ,GAAkBJ,OAAOK,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBpK,EAAOoK,GAAOD,EAAOC,IAAU,OAAOpK,EAMne,IAAImL,EAASC,sBAAW,SAAUC,EAAMC,GACtC,IAAIC,EAAaF,EAAKtE,MAClBA,OAAuB,IAAfwE,EAAwB,eAAiBA,EACjDC,EAAYH,EAAKtC,KACjBA,OAAqB,IAAdyC,EAAuB,GAAKA,EACnCC,EAAOf,EAAyBW,EAAM,CAAC,QAAS,SAEpD,OAAoBK,IAAMC,cAAc,MAAO5B,EAAS,CACtDuB,IAAKA,EACLM,MAAO,6BACP5F,MAAO+C,EACP8C,OAAQ9C,EACR+C,QAAS,YACTC,KAAM,OACNC,OAAQjF,EACRkF,YAAa,IACbC,cAAe,QACfC,eAAgB,SACfV,GAAoBC,IAAMC,cAAc,WAAY,CACrDS,OAAQ,iBACOV,IAAMC,cAAc,OAAQ,CAC3CU,EAAG,mFACYX,IAAMC,cAAc,OAAQ,CAC3CW,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,OACWf,IAAMC,cAAc,OAAQ,CAC3CW,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,WAGRtB,EAAOuB,UAAY,CACjB3F,MAAO4F,IAAUC,OACjB7D,KAAM4D,IAAUE,UAAU,CAACF,IAAUC,OAAQD,IAAUG,UAEzD3B,EAAO4B,YAAc,SACN5B,O,iCC/Cf,6CAASpB,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUjK,GAAU,IAAK,IAAI0H,EAAI,EAAGA,EAAIwC,UAAU/J,OAAQuH,IAAK,CAAE,IAAIyC,EAASD,UAAUxC,GAAI,IAAK,IAAI0C,KAAOD,EAAcH,OAAOK,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQpK,EAAOoK,GAAOD,EAAOC,IAAY,OAAOpK,GAAkB+J,EAASS,MAAMC,KAAMP,WAEhT,SAASQ,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAK1C,EAAnE1H,EAEzF,SAAuCmK,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAK1C,EAA5D1H,EAAS,GAAQ4K,EAAaZ,OAAOa,KAAKV,GAAqB,IAAKzC,EAAI,EAAGA,EAAIkD,EAAWzK,OAAQuH,IAAO0C,EAAMQ,EAAWlD,GAAQiD,EAASG,QAAQV,IAAQ,IAAapK,EAAOoK,GAAOD,EAAOC,IAAQ,OAAOpK,EAFxM+K,CAA8BZ,EAAQQ,GAAuB,GAAIX,OAAOgB,sBAAuB,CAAE,IAAIC,EAAmBjB,OAAOgB,sBAAsBb,GAAS,IAAKzC,EAAI,EAAGA,EAAIuD,EAAiB9K,OAAQuH,IAAO0C,EAAMa,EAAiBvD,GAAQiD,EAASG,QAAQV,IAAQ,GAAkBJ,OAAOK,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBpK,EAAOoK,GAAOD,EAAOC,IAAU,OAAOpK,EAMne,IAAIgN,EAAQ5B,sBAAW,SAAUC,EAAMC,GACrC,IAAIC,EAAaF,EAAKtE,MAClBA,OAAuB,IAAfwE,EAAwB,eAAiBA,EACjDC,EAAYH,EAAKtC,KACjBA,OAAqB,IAAdyC,EAAuB,GAAKA,EACnCC,EAAOf,EAAyBW,EAAM,CAAC,QAAS,SAEpD,OAAoBK,IAAMC,cAAc,MAAO5B,EAAS,CACtDuB,IAAKA,EACLM,MAAO,6BACP5F,MAAO+C,EACP8C,OAAQ9C,EACR+C,QAAS,YACTC,KAAM,OACNC,OAAQjF,EACRkF,YAAa,IACbC,cAAe,QACfC,eAAgB,SACfV,GAAoBC,IAAMC,cAAc,WAAY,CACrDS,OAAQ,iBACOV,IAAMC,cAAc,OAAQ,CAC3CU,EAAG,uFAGPW,EAAMN,UAAY,CAChB3F,MAAO4F,IAAUC,OACjB7D,KAAM4D,IAAUE,UAAU,CAACF,IAAUC,OAAQD,IAAUG,UAEzDE,EAAMD,YAAc,QACLC","file":"static/js/68.ff707a07.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n                <small> Creation: {details && details.created_by} {details && details.creation_date}</small>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n                <small> Modified: {details && details.modified_by} {details && details.modification_date}</small>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Col, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nconst months = [\r\n  'January', 'February', 'March', 'April', 'May', 'June', \r\n  'July', 'August', 'September', 'October', 'November', 'December'\r\n];\r\n\r\nconst FinanceReceiptData = ({ SchemeId, ContactId, handleAddOrder, checkOrderExists }) => {\r\n  FinanceReceiptData.propTypes = {\r\n    SchemeId: PropTypes.any,\r\n    ContactId: PropTypes.any,\r\n    handleAddOrder: PropTypes.any,\r\n    checkOrderExists: PropTypes.any,\r\n  };\r\n\r\n  const [createReceipt, setCreateReceipt] = useState({});\r\n  const [selectedMonths, setSelectedMonths] = useState([]);\r\n  const [schemeAmount, setSchemeAmount] = useState(0);\r\n  const [paymentHistory, setPaymentHistory] = useState([]);\r\n  const [isReceipt, setIsReceipt] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getSchemeByID = () => {\r\n      api.post('/scheme/getSchemeByID', { scheme_id: SchemeId })\r\n        .then((res) => {\r\n          setSchemeAmount(res.data.data.amount);\r\n        })\r\n        .catch(() => {\r\n          message('Order Data Not Found', 'info');\r\n        });\r\n    };\r\n\r\n    const getPaymentHistory = () => {\r\n      api.post('/contact/getPaymentHistory', { contact_id: ContactId, scheme_id: SchemeId })\r\n        .then((res) => {\r\n          setPaymentHistory(res.data.data);\r\n        })\r\n        .catch(() => {\r\n          message('Payment History Not Found', 'info');\r\n        });\r\n    };\r\n\r\n    if (SchemeId && ContactId) {\r\n      getSchemeByID();\r\n      getPaymentHistory();\r\n    }\r\n  }, [SchemeId, ContactId]);\r\n\r\n  const handleInputreceipt = (e) => {\r\n    setCreateReceipt({ ...createReceipt, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleMonthChange = (month) => {\r\n    const isMonthPaid = paymentHistory.some(payment => payment.month === month);\r\n    if (isMonthPaid) {\r\n      message('This month has already been paid', 'warning');\r\n    } else {\r\n      setSelectedMonths(prev => \r\n        prev.includes(month) ? prev.filter(m => m !== month) : [...prev, month]\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedMonths.length > 0) {\r\n      const baseAmount = Math.floor(schemeAmount / 12);\r\n      let remainder = schemeAmount - (baseAmount * 12);\r\n\r\n      const amounts = selectedMonths.map(() => {\r\n        const additionalAmount = remainder > 0 ? 1 : 0;\r\n        remainder--;\r\n        return baseAmount + additionalAmount;\r\n      });\r\n\r\n      const totalAmount = amounts.reduce((sum, amount) => sum + amount, 0);\r\n      setCreateReceipt(prev => ({ ...prev, amount: totalAmount }));\r\n    } else {\r\n      setCreateReceipt(prev => ({ ...prev, amount: 0 }));\r\n    }\r\n  }, [selectedMonths, schemeAmount]);\r\n\r\n  const handleSubmit = async () => {\r\n    const baseAmount = Math.floor(schemeAmount / 12);\r\n    let remainder = schemeAmount - (baseAmount * 12);\r\n  \r\n    const invoiceRecords = selectedMonths.map(month => {\r\n      const additionalAmount = remainder > 0 ? 1 : 0;\r\n      remainder--;\r\n      const monthAmount = baseAmount + additionalAmount;\r\n  \r\n      return {\r\n        ...createReceipt,\r\n        month,\r\n        amount: monthAmount,\r\n        scheme_id: SchemeId,\r\n        contact_id: ContactId,\r\n        date: createReceipt.date || moment().format('YYYY-MM-DD'),\r\n      };\r\n    });\r\n  \r\n    try {\r\n      const totalAmount = invoiceRecords.reduce((sum, record) => sum + record.amount, 0);\r\n  \r\n      // Insert overall amount into Invoice table\r\n      await api.post('/contact/insertInvoice', {\r\n        scheme_id: SchemeId,\r\n        contact_id: ContactId,\r\n        invoice_amount: totalAmount,\r\n        invoice_date: createReceipt.date || moment().format('YYYY-MM-DD'),\r\n      });\r\n  \r\n      // Insert a single receipt record for the total amount\r\n      if (isReceipt) {\r\n        await api.post('/contact/insertReceipt', {\r\n          scheme_id: SchemeId,\r\n          contact_id: ContactId,\r\n          amount: totalAmount, // Total amount for receipt\r\n          date: createReceipt.date || moment().format('YYYY-MM-DD'),\r\n          mode_of_payment: createReceipt.mode_of_payment,\r\n          cheque_no: createReceipt.cheque_no,\r\n          cheque_date: createReceipt.cheque_date,\r\n          bank_name: createReceipt.bank_name,\r\n          remarks: createReceipt.remarks,\r\n        });\r\n      }\r\n  \r\n      // Prepare promises for inserting invoice items, payment history, and receipt history\r\n      const promises = invoiceRecords.map(record => {\r\n        const insertInvoiceItem = api.post('/contact/insertInvoiceItem', record);\r\n        const insertPaymentHistory = api.post('/contact/insertContactSchemePaymentHistory', record);\r\n  \r\n        const insertReceiptHistory = isReceipt \r\n          ? api.post('/contact/insertReceiptHistory', record)\r\n          : Promise.resolve();\r\n  \r\n        return Promise.all([insertInvoiceItem, insertPaymentHistory, insertReceiptHistory]);\r\n      });\r\n  \r\n      // Wait for all promises to resolve\r\n      await Promise.all(promises);\r\n  \r\n      message('Records inserted successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error inserting records:', error);\r\n      message('Error inserting records', 'danger');\r\n    }\r\n  };\r\n\r\n  const handleCreatePayment = async () => {\r\n    const orderExists = await checkOrderExists(SchemeId, ContactId);\r\n    console.log('Order Exists:', orderExists); // Log the result\r\n\r\n    if (orderExists) {\r\n      handleSubmit();\r\n    } else {\r\n      // Populate orderdetails with contact details before opening the modal\r\n      handleAddOrder();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <>\r\n      <Col md=\"12\">\r\n        <FormGroup>\r\n          <Label>Total Scheme Amount</Label>\r\n          <Input\r\n            type=\"text\"\r\n            value={schemeAmount || ''}\r\n            name=\"total_amount\"\r\n            disabled\r\n          />\r\n        </FormGroup>\r\n      </Col>\r\n      <Col md=\"12\">\r\n        <FormGroup>\r\n          <Label>Select Months</Label>\r\n          {months.map(month => (\r\n            <FormGroup check key={month}>\r\n              <Label check>\r\n                <Input \r\n                  type=\"checkbox\" \r\n                  checked={selectedMonths.includes(month)} \r\n                  onChange={() => handleMonthChange(month)} \r\n                />{' '}\r\n                {month}\r\n              </Label>\r\n            </FormGroup>\r\n          ))}\r\n        </FormGroup>\r\n      </Col>\r\n      <Col md=\"12\">\r\n        <FormGroup>\r\n          <Label>Amount For Selected Months</Label>\r\n          <Input\r\n            type=\"text\"\r\n            value={createReceipt.amount || ''}\r\n            name=\"amount\"\r\n            readOnly\r\n          />\r\n        </FormGroup>\r\n      </Col>\r\n      \r\n      <Col md=\"12\">\r\n        <FormGroup>\r\n          <Label>Mode Of Payment <span className=\"required\">*</span></Label>\r\n          <Input type=\"select\" name=\"mode_of_payment\" onChange={handleInputreceipt}>\r\n            <option value=\"\" selected=\"selected\">Please Select</option>\r\n            <option value=\"cash\">Cash</option>\r\n            <option value=\"cheque\">Cheque</option>\r\n            <option value=\"giro\">Giro</option>\r\n          </Input>\r\n        </FormGroup>\r\n      </Col>\r\n      {createReceipt.mode_of_payment === 'cheque' && (\r\n        <>\r\n          <Col md=\"12\">\r\n            <FormGroup>\r\n              <Label>Check No</Label>\r\n              <Input\r\n                type=\"number\"\r\n                onChange={handleInputreceipt}\r\n                value={createReceipt.cheque_no || ''}\r\n                name=\"cheque_no\"\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col md=\"12\">\r\n            <FormGroup>\r\n              <Label>Check date</Label>\r\n              <Input\r\n                type=\"date\"\r\n                onChange={handleInputreceipt}\r\n                value={createReceipt.cheque_date || ''}\r\n                name=\"cheque_date\"\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col md=\"12\">\r\n            <FormGroup>\r\n              <Label>Bank</Label>\r\n              <Input\r\n                type=\"text\"\r\n                onChange={handleInputreceipt}\r\n                value={createReceipt.bank_name || ''}\r\n                name=\"bank_name\"\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n        </>\r\n      )}\r\n      <Col md=\"12\">\r\n        <FormGroup>\r\n          <Label>Notes</Label>\r\n          <Input\r\n            type=\"text\"\r\n            onChange={handleInputreceipt}\r\n            value={createReceipt.remarks || ''}\r\n            name=\"remarks\"\r\n          />\r\n        </FormGroup>\r\n      </Col>\r\n      <Col md=\"12\">\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input \r\n              type=\"checkbox\" \r\n              checked={isReceipt} \r\n              onChange={() => setIsReceipt(!isReceipt)} \r\n            />{' '}\r\n            Create Receipt\r\n          </Label>\r\n        </FormGroup>\r\n      </Col>\r\n      \r\n      <FormGroup>\r\n        <Button\r\n          onClick={handleCreatePayment}\r\n          type=\"button\"\r\n          className=\"btn btn-dark shadow-none\"\r\n        >\r\n          Save\r\n        </Button>\r\n      </FormGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FinanceReceiptData;\r\n","import React, { useEffect, useState, useContext} from 'react';\r\nimport { Row, Col, Form, FormGroup, Button, Label, Input, ModalHeader, Modal, ModalFooter, ModalBody, TabContent, Table, TabPane } from 'reactstrap';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport * as Icon from 'react-feather';\r\nimport Swal from 'sweetalert2';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCardV2 from '../../components/ComponentCardV2';\r\nimport message from '../../components/Message';\r\nimport Tab from '../../components/Tab';\r\nimport api from '../../constants/api';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\nimport AppContext from '../../context/AppContext';\r\nimport MakeSchemePayment from '../../components/Customer/MakeSchemePayment';\r\n\r\nconst ContentUpdate = () => {\r\n  // All state variables\r\n  const [contentDetails, setContentDetails] = useState();\r\n  const [schemeContacts, setSchemeContacts] = useState();\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [secondModalOpen, setSecondModalOpen] = useState(false);\r\n  const [selectedScheme, setSelectedScheme] = useState(null);\r\n  const [paymenthistory, setPaymentHistory] = useState(null);\r\n  // const [orderModalOpen, setOrderModalOpen] = useState(false);\r\n  const [schemeorder, setSchemeOrder] = useState(null);\r\n  const [orderdetails, setOrderDetails] = useState(false);\r\n  \r\n  // Navigation and Parameter Constants\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { loggedInuser } = useContext(AppContext);\r\n\r\n  //Setting data in contentDetails\r\n  const handleInputs = (e) => {\r\n    setContentDetails({ ...contentDetails, [e.target.name]: e.target.value });\r\n  };\r\n \r\n  const tabs = [\r\n    { id: '1', name: 'Scheme Linked' },\r\n    { id: '2', name: 'Payment' },\r\n  ];\r\n\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n  const [addPurchaseOrderModal, setAddPurchaseOrderModal] = useState();\r\n  const [tenderForms, setTenderForms] = useState({\r\n    contact_id: '',\r\n  });\r\n\r\n  const [company, setCompany] = useState();\r\n  const handleInputsTenderForms = (e) => {\r\n    setTenderForms({ ...tenderForms, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const insertContactSchemeData = () => {\r\n    if (tenderForms.scheme_id !== '') {\r\n      tenderForms.creation_date = creationdatetime;\r\n      tenderForms.created_by = loggedInuser.first_name;\r\n      tenderForms.contact_id = id;\r\n      api\r\n        .post('/contact/insertContactSchemeData', tenderForms)\r\n        .then((res) => {\r\n          const insertedDataId = res.data.data.insertId;\r\n          setTenderForms({ ...tenderForms, contact_id: insertedDataId });\r\n            setTenderForms({ ...tenderForms, contact_id: res.data.data.insertId }); // Set selected company ID after insertion\r\n          message('Contact inserted successfully.', 'success');\r\n          setAddPurchaseOrderModal(false);\r\n        })\r\n        .catch(() => {\r\n          message('Network connection error.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields.', 'error');\r\n    }\r\n  };\r\n\r\n  // Get content data By content id\r\n  const getContentById = () => {\r\n    api\r\n      .post('/contact/getContactsById', { contact_id: id })\r\n      .then((res) => {\r\n        setContentDetails(res.data.data[0]);\r\n      })\r\n      .catch(() => {\r\n        message('Content Data Not Found', 'info');\r\n      });\r\n  };\r\n  //Edit Content\r\n  const editContentData = () => {\r\n    contentDetails.modification_date = creationdatetime;\r\n    console.log(contentDetails);\r\n    if (\r\n      contentDetails.content_title !== '' &&\r\n      contentDetails.sub_category_id !== '' &&\r\n      contentDetails.published !== ''\r\n    ) {\r\n      api\r\n        .post('/contact/editContact', contentDetails)\r\n        .then(() => {\r\n          message('Record edited successfully', 'success');\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields', 'warning');\r\n    }\r\n  };\r\n\r\n  // getting data from Category\r\n\r\n  const addContactToggle = () => {\r\n    setAddPurchaseOrderModal(!addPurchaseOrderModal);\r\n  };\r\n \r\n  const getContact = () => {\r\n    api.get('/contact/getSchemes').then((res) => {\r\n      setCompany(res.data.data);\r\n      // if (res.data.data && res.data.data.length > 0) {\r\n      //   // Assuming the newly added company is at the end of the list\r\n      //   const newlyAddedCompanyId = res.data.data[res.data.data.length - 1].company_id;\r\n      //   setTenderForms({ ...tenderForms, company_id: newlyAddedCompanyId }); // Set the last company as selected\r\n      // }\r\n    });\r\n  };\r\n\r\n  const getSchemeContactsByID = () => {\r\n    api\r\n      .post('/contact/getSchemeByConductID', { contact_id: id })\r\n      .then((res) => {\r\n        setSchemeContacts(res.data.data);\r\n        console.log('setSchemeContacts', res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Failed to fetch scheme contacts.', 'error');\r\n      });\r\n};\r\n\r\nconst getPaymentHistory = () => {\r\n  api.post('/contact/getPaymentHistoryByContact', {contact_id: id})\r\n    .then((res) => {\r\n      setPaymentHistory(res.data.data);\r\n    })\r\n    .catch(() => {\r\n      message('Payment History Not Found', 'info');\r\n    });\r\n};\r\n\r\n\r\n// const handleCreatePayment = (scheme) => {\r\n//   setSelectedScheme(scheme);\r\n//   setSecondModalOpen(true);\r\n// };\r\n\r\nuseEffect(() => {\r\n  getSchemeContactsByID();\r\n}, [id]);\r\nuseEffect(() => {\r\n  getContact();\r\n}, []);\r\n\r\n  useEffect(() => {\r\n    getContentById();\r\n  }, [id]);\r\n  useEffect(() => {\r\n    getPaymentHistory();\r\n  }, [id]);\r\n  // Add logic to check if an order exists\r\n  // const checkOrderExists = () => {\r\n  //     api\r\n  //       .post('/scheme/getOrderById', { scheme_id: id })\r\n  //       .then((res) => {\r\n  //         setSchemeOrder(res.data.data);\r\n  //         console.log('schemeorder', schemeorder)\r\n  //         getContentById();\r\n  //       })\r\n  //       .catch(() => {\r\n  //        // message('Costing Summary not found', 'info');\r\n  //       });\r\n  //   };\r\n  const checkOrderExists = async (SchemeId, ContactId) => {\r\n    try {\r\n      const res = await api.post('/contact/getOrderById', { scheme_id: SchemeId, contact_id: ContactId });\r\n      const orderData = res.data.data;\r\n      setSchemeOrder(orderData);\r\n      console.log('Scheme Order:', orderData);\r\n  \r\n      // Check if orderData is valid\r\n      if (orderData && orderData.scheme_id === SchemeId && orderData.contact_id === ContactId) {\r\n        console.log('IDs match:', true);\r\n        return true;\r\n      }\r\n      console.log('IDs match:', false);\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error checking order:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  \r\nuseEffect(() => {\r\n  console.log('Scheme Order State:', schemeorder);\r\n}, [schemeorder]);\r\n    // const handleInserts = (e) => {\r\n    //   setOrderDetails({ ...orderdetails, [e.target.name]: e.target.value });\r\n    // };\r\n  const insertOrder = () => {\r\n    // Add logic to add an order\r\n    \r\n      orderdetails.scheme_id = selectedScheme.scheme_id;\r\n      orderdetails.created_by = loggedInuser.first_name;\r\n      orderdetails.creation_date = creationdatetime;\r\n      api\r\n        .post('/contact/insertOrder', orderdetails)\r\n        .then((res) => {\r\n          setOrderDetails(res.data.data);\r\n          //setCreateOrder(res.data.data);\r\n          message('Invoice inserted successfully.', 'success');\r\n          //window.location.Reload();\r\n        })\r\n        .catch(() => {\r\n          message('Network connection error.');\r\n        });\r\n    };\r\n\r\n   \r\n  const columns = [\r\n    {\r\n      name: 'id',\r\n      selector: 'contact_id',\r\n      grow: 0,\r\n      wrap: true,\r\n      width: '4%',\r\n    },\r\n    {\r\n      name: 'Title',\r\n      selector: 'title',\r\n      sortable: true,\r\n      grow: 0,\r\n      wrap: true,\r\n    },\r\n    // {\r\n    //   name: arabic.find((item) => item.key_text === 'mdTradingContact.Email')?.[genLabel],\r\n    //   //name: 'Email',\r\n    //   selector: 'email',\r\n    //   sortable: true,\r\n    //   grow: 2,\r\n    //   wrap: true,\r\n    // },\r\n    {\r\n      name: 'Amount',\r\n      //name: 'Phone(Direct)',\r\n      selector: 'amount',\r\n      sortable: true,\r\n      grow: 0,\r\n    },\r\n    {\r\n      name: 'Start Date',\r\n      selector: 'start_date',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'End Date',\r\n      selector: 'end_date',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'Status',\r\n      selector: 'status',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'Del',\r\n      selector: 'delete',\r\n      cell: () => <Icon.Trash />,\r\n      grow: 0,\r\n      width: 'auto',\r\n      wrap: true,\r\n    },\r\n    {\r\n      name: 'Payment',\r\n      selector: 'payment',\r\n      grow: 0,\r\n      width: 'auto',\r\n      wrap: true,\r\n    },\r\n\r\n  ];\r\n\r\n  const paymentcolumns = [\r\n    {\r\n      name: 'id',\r\n      selector: '',\r\n      grow: 0,\r\n      wrap: true,\r\n      width: '4%',\r\n    },\r\n    {\r\n      name: 'Title',\r\n      selector: 'title',\r\n      sortable: true,\r\n      grow: 0,\r\n      wrap: true,\r\n    },\r\n    // {\r\n    //   name: arabic.find((item) => item.key_text === 'mdTradingContact.Email')?.[genLabel],\r\n    //   //name: 'Email',\r\n    //   selector: 'email',\r\n    //   sortable: true,\r\n    //   grow: 2,\r\n    //   wrap: true,\r\n    // },\r\n    {\r\n      name: 'Amount',\r\n      //name: 'Phone(Direct)',\r\n      selector: 'amount',\r\n      sortable: true,\r\n      grow: 0,\r\n    },\r\n    {\r\n      name: 'Month',\r\n      selector: 'month',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'Received Date',\r\n      selector: 'date',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'Mode of Payment',\r\n      selector: 'mode_of_payment',\r\n      sortable: true,\r\n      width: 'auto',\r\n      grow: 3,\r\n    },\r\n    {\r\n      name: 'Del',\r\n      selector: 'delete',\r\n      cell: () => <Icon.Trash />,\r\n      grow: 0,\r\n      width: 'auto',\r\n      wrap: true,\r\n    },\r\n  ];\r\n\r\n  const deleteRecord = (ContactSchemeId) => {\r\n    Swal.fire({\r\n      title: `Are you sure? `,\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        api\r\n          .post('/scheme/deleteContactSchemeData', { contact_scheme_id: ContactSchemeId })\r\n          .then(() => {\r\n            Swal.fire('Deleted!', 'Scheme COntact has been deleted.', 'success');\r\n            message('Record deleted successfully', 'success'); \r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 300);\r\n          })\r\n          .catch(() => {\r\n            message('Unable to delete record.', 'error');\r\n          });\r\n      }\r\n    });\r\n  };\r\n  const deletePaymentRecord = (PaymentHistoryId) => {\r\n    Swal.fire({\r\n      title: `Are you sure? `,\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        api\r\n          .post('/contact/deleteSchemePayentHistory', { scheme_payment_history_id : PaymentHistoryId })\r\n          .then(() => {\r\n            Swal.fire('Deleted!', 'Scheme COntact has been deleted.', 'success');\r\n            message('Record deleted successfully', 'success'); \r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 300);\r\n          })\r\n          .catch(() => {\r\n            message('Unable to delete record.', 'error');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCreatePayment = async (scheme) => {\r\n    setSelectedScheme(scheme);\r\n    setSecondModalOpen(true);\r\n    setOrderDetails({\r\n          title: contentDetails.first_name,\r\n          mobile: contentDetails.mobile,\r\n          email: contentDetails.email,\r\n          address: contentDetails.address1,\r\n          order_date: new Date().toISOString().split('T')[0], // set current date\r\n          order_status: '', // default status, you can set it as needed\r\n        });\r\n    // const orderExists = await checkOrderExists(scheme.scheme_id);\r\n    // console.log('Order Exists:', orderExists); // Log the result\r\n\r\n    // if (orderExists) {\r\n    //   setSecondModalOpen(true);\r\n    // } else {\r\n    //   // Populate orderdetails with contact details before opening the modal\r\n    //   setOrderDetails({\r\n    //     title: contentDetails.first_name,\r\n    //     mobile: contentDetails.mobile,\r\n    //     email: contentDetails.email,\r\n    //     address: contentDetails.address1,\r\n    //     order_date: new Date().toISOString().split('T')[0], // set current date\r\n    //     order_status: '', // default status, you can set it as needed\r\n    //   });\r\n    //   // setOrderModalOpen(true);\r\n    // }\r\n  };\r\n\r\n  const handleAddOrder = async (orderData) => {\r\n    await insertOrder(orderData);\r\n    // setOrderModalOpen(false);\r\n    // setSecondModalOpen(true);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs heading={contentDetails && contentDetails.title} />\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCardV2>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                    setTimeout(() => {\r\n                      navigate('/Customer');\r\n                    }, 1100);\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                  }}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"dark\"\r\n                  onClick={() => {\r\n                    navigate('/Customer');\r\n                    console.log('back to list');\r\n                  }}\r\n                >\r\n                  Back to List\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </ComponentCardV2>\r\n          {/* Content Details Form */}\r\n          <ComponentCard title=\"Customer details\" creationModificationDate={contentDetails}>\r\n            <ToastContainer></ToastContainer>\r\n            <Row>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Contact Id </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.contact_id}\r\n                    name=\"contact_id\"\r\n                    readonly\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                <Label>Name</Label><span className='required'>*</span>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.first_name}\r\n                    name=\"first_name\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Mobile</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.mobile}\r\n                    name=\"mobile\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Email</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.email}\r\n                    name=\"email\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Password</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.pass_word}\r\n                    name=\"pass_word\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                <Label>Address</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.address1}\r\n                    name=\"address1\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n             \r\n            </Row>\r\n          </ComponentCard>\r\n          </FormGroup>\r\n      </Form>\r\n      <ComponentCard title=\"More Details\">\r\n        <ToastContainer></ToastContainer>\r\n\r\n        <Tab toggle={toggle} tabs={tabs} />\r\n        <TabContent className=\"p-4\" activeTab={activeTab}>\r\n          <TabPane tabId=\"1\">\r\n        <Col md=\"3\">\r\n            <Button color=\"primary\" className=\"shadow-none\" onClick={addContactToggle.bind(null)}>\r\n            Add New Scheme\r\n            </Button>\r\n            </Col>\r\n            <br />\r\n\r\n            <Row>\r\n              <Form>\r\n                <FormGroup>\r\n        <Table id=\"example\" className=\"display border border-secondary rounded\">\r\n          <thead>\r\n            <tr>\r\n              {columns.map((cell) => {\r\n                return <td key={cell.name}>{cell.name}</td>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {schemeContacts &&\r\n              schemeContacts.map((element, i) => {\r\n                return (\r\n                  <tr key={element.contact_scheme_id}>\r\n                    <td>{i + 1}</td>\r\n                    <td>{element.title}</td>\r\n                    <td>{element.amount}</td>\r\n                    <td>{element.start_date}</td>\r\n                    <td>{element.end_date}</td>\r\n                    <td>{element.status}</td>\r\n                    <td>\r\n                      <div color=\"primary\" className=\"anchor\"> \r\n                      <span onClick={() => deleteRecord(element.contact_scheme_id)}>\r\n                          <Icon.Trash2 />\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                    {/* <td>\r\n                            <div color=\"primary\" className=\"anchor\">\r\n                              <Button onClick={() => handleCreatePayment(element)}>\r\n                                Create Payment\r\n                              </Button>\r\n                              <Modal isOpen={secondModalOpen} toggle={() => setSecondModalOpen(!secondModalOpen)}>\r\n                                <ModalHeader toggle={() => setSecondModalOpen(!secondModalOpen)}>\r\n                                  Make Scheme Payment\r\n                                </ModalHeader>\r\n                                <ModalBody>\r\n                                  {selectedScheme && (\r\n                                    <MakeSchemePayment\r\n                                      SchemeId={selectedScheme.scheme_id}\r\n                                      ContactId={selectedScheme.contact_id} // Assuming you need this too\r\n                                      schemeData={selectedScheme} // Pass the whole scheme data if needed\r\n                                    />\r\n                                  )}\r\n                                </ModalBody>\r\n                              </Modal>\r\n                            </div>\r\n                          </td> */}\r\n                          <td>\r\n                      <div color=\"primary\" className=\"anchor\">\r\n                        <Button onClick={() => handleCreatePayment(element)}>Create Payment</Button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n        </FormGroup>\r\n        {/* <Modal size=\"lg\" isOpen={orderModalOpen} toggle={() => setOrderModalOpen(!orderModalOpen)}>\r\n          <ModalHeader toggle={() => setOrderModalOpen(!orderModalOpen)}>Create Order</ModalHeader>\r\n          <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Row>\r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Company name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        onChange={handleInserts}\r\n                        value={orderdetails && orderdetails.title}\r\n                        name=\"title\"\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Mobile</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        onChange={handleInserts}\r\n                        value={orderdetails && orderdetails.mobile}\r\n                        name=\"mobile\"\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Email</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        onChange={handleInserts}\r\n                        value={orderdetails && orderdetails.email}\r\n                        name=\"email\"\r\n                        \r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Address</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        onChange={handleInserts}\r\n                        value={orderdetails && orderdetails.address}\r\n                        name=\"address\"\r\n                        \r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Order Date</Label>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onChange={handleInserts}\r\n                        value={orderdetails && orderdetails.order_date}\r\n                        name=\"order_date\"\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  \r\n                  <Col md=\"4\">\r\n                    <FormGroup>\r\n                      <Label>Status </Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"order_status\"\r\n                        defaultValue={orderdetails && orderdetails.status}\r\n                        onChange={handleInserts}\r\n                      >\r\n                        <option value=\"\">Please Select</option>\r\n                        <option defaultValue=\"selected\" value=\"WIP\">\r\n                          WIP\r\n                        </option>\r\n                        <option value=\"Billable\">Billable</option>\r\n                        <option value=\"Billed\">Billed</option>\r\n                        <option value=\"Complete\">Complete</option>\r\n                        <option value=\"Cancelled\">Cancelled</option>\r\n                        <option value=\"On Hold\">On Hold</option>\r\n                        <option value=\"Latest\">Latest</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      color=\"primary\"\r\n                      className=\"btn shadow-none mr-2\"\r\n                      onClick={() => {\r\n                        setOrderModalOpen(false);\r\n                        handleAddOrder();\r\n                      }}\r\n                    >\r\n                      Save & Continue\r\n                    </Button>\r\n                    <Button\r\n                      className=\"shadow-none\"\r\n                      color=\"secondary\"\r\n                      onClick={() => {\r\n                        setOrderModalOpen(false);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Row>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal> */}\r\n\r\n        <Modal isOpen={secondModalOpen} toggle={() => setSecondModalOpen(!secondModalOpen)}>\r\n          <ModalHeader toggle={() => setSecondModalOpen(!secondModalOpen)}>Make Scheme Payment</ModalHeader>\r\n          <ModalBody>\r\n            {selectedScheme && (\r\n              <MakeSchemePayment\r\n                SchemeId={selectedScheme.scheme_id}\r\n                ContactId={selectedScheme.contact_id} // Assuming you need this too\r\n                schemeData={selectedScheme} // Pass the whole scheme data if needed\r\n                handleAddOrder={handleAddOrder}\r\n                checkOrderExists={checkOrderExists}\r\n              />\r\n            )}\r\n          </ModalBody>\r\n        </Modal>\r\n        </Form>\r\n      </Row>\r\n            \r\n            <Modal size=\"sm\" isOpen={addPurchaseOrderModal} toggle={addContactToggle.bind(null)}>\r\n              <ModalHeader toggle={addContactToggle.bind(null)}>Link To Scheme</ModalHeader>\r\n              <ModalBody>\r\n              <FormGroup>\r\n                <Row>\r\n                \r\n                  <Col md=\"12\">\r\n                <FormGroup>\r\n                  <Label>Scheme</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    onChange={(e) => {\r\n                      setTenderForms({ ...tenderForms, scheme_id: e.target.value });\r\n                      handleInputsTenderForms(e);\r\n                    }}\r\n                    //className={inputClass}\r\n                    value={tenderForms.scheme_id}\r\n                    name=\"scheme_id\"\r\n                  >\r\n                    <option value=\"selected\">Please Select</option>\r\n                    {company &&\r\n                      company.map((e) => {\r\n                        return (\r\n                          <option key={e.scheme_id} value={e.scheme_id}>\r\n                            {e.title}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n              </Row>\r\n                    <br />\r\n            \r\n              <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"shadow-none\"\r\n            onClick={() => {\r\n              insertContactSchemeData();\r\n            }}\r\n          >\r\n           Submit\r\n          </Button>\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"shadow-none\"\r\n            onClick={() => {\r\n              setAddPurchaseOrderModal(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n            \r\n            </FormGroup>\r\n            </ModalBody>\r\n            </Modal>\r\n            \r\n            </TabPane>\r\n          <TabPane tabId=\"2\">\r\n          <Form>\r\n                <FormGroup>\r\n        <Table id=\"example\" className=\"display border border-secondary rounded\">\r\n          <thead>\r\n            <tr>\r\n              {paymentcolumns.map((cell) => {\r\n                return <td key={cell.name}>{cell.name}</td>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paymenthistory &&\r\n              paymenthistory.map((element, i) => {\r\n                return (\r\n                  <tr key={element.scheme_payment_history_id}>\r\n                    <td>{i + 1}</td>\r\n                    <td>{element.title}</td>\r\n                    <td>{element.amount}</td>\r\n                    <td>{element.month}</td>\r\n                    <td>{element.date}</td>\r\n                    <td>{element.mode_of_payment}</td>\r\n                    <td>\r\n                      <div color=\"primary\" className=\"anchor\"> \r\n                      <span onClick={() => deletePaymentRecord(element.scheme_payment_history_id)}>\r\n                          <Icon.Trash2 />\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n        </FormGroup>\r\n        </Form>\r\n          </TabPane>\r\n          \r\n        </TabContent>\r\n      </ComponentCard>\r\n     \r\n    </>\r\n  );\r\n};\r\nexport default ContentUpdate;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import { Card, CardBody } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst pStyle = {\r\n  textAlign: 'right',\r\n  marginRight: '10px',\r\n};\r\nconst oStyle={\r\noutline:'none',\r\nborder:'none'\r\n};\r\n\r\nconst ComponentCardV2 = ({ children }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CardBody style={pStyle} >\r\n        <div className=\"btn btn-space text-nowrap shadow-none outline-none\" style={oStyle}>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCardV2.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ComponentCardV2;\r\n","import React,{useEffect} from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nexport default function Tab({ toggle,tabs }) {\r\n  Tab.propTypes = {\r\n    toggle: PropTypes.func,\r\n    tabs: PropTypes.array\r\n  };\r\n\r\n  // for tab refresh navigation #Renuka 31-05-23\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  useEffect(() => {\r\n   toggle(searchParams.get('tab'))\r\n  }, [searchParams.get('tab')]);\r\n  // End for tab refresh navigation #Renuka 31-05-23\r\n  return (\r\n    <Nav tabs>\r\n\r\n      {tabs?.map((e)=>{\r\n        return (\r\n          <NavItem key={e.id}>\r\n            <NavLink\r\n            key={e.id}\r\n              className={e.id === searchParams.get('tab') ? 'active' : ''}\r\n              onClick={() => {\r\n                setSearchParams({tab:e.id});\r\n                toggle(e.id);\r\n              }}\r\n            >\r\n              {e.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        )\r\n      })}\r\n    </Nav>\r\n  );\r\n}\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Trash2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"3 6 5 6 21 6\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"10\",\n    y1: \"11\",\n    x2: \"10\",\n    y2: \"17\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"14\",\n    y1: \"11\",\n    x2: \"14\",\n    y2: \"17\"\n  }));\n});\nTrash2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTrash2.displayName = 'Trash2';\nexport default Trash2;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Trash = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"3 6 5 6 21 6\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"\n  }));\n});\nTrash.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTrash.displayName = 'Trash';\nexport default Trash;"],"sourceRoot":""}